[PATCH] Device driver patches for accton as7712 (fan/psu/cpld/led/sfp)

---
diff --git a/drivers/hwmon/Kconfig b/drivers/hwmon/Kconfig
index 02d3d85..ea84ca4 100644
--- a/drivers/hwmon/Kconfig
+++ b/drivers/hwmon/Kconfig
@@ -1624,6 +1624,35 @@ config SENSORS_ULTRA45
 	  This driver provides support for the Ultra45 workstation environmental
 	  sensors.
 
+config SENSORS_ACCTON_I2C_CPLD
+        tristate "Accton as7712 cpld"
+        depends on I2C
+        default y
+        help
+          If you say yes here you get support for Accton as7712 32x cpld.
+
+          This driver can also be built as a module. If so, the module will
+          be called accton_as7712_32x_cpld.
+
+config SENSORS_ACCTON_AS7712_32x_FAN
+        tristate "Accton as7712 32x fan"
+        depends on I2C && SENSORS_ACCTON_I2C_CPLD
+        help
+          If you say yes here you get support for Accton as7712 32x fan.
+
+          This driver can also be built as a module. If so, the module will
+          be called accton_as7712_32x_fan.
+
+config SENSORS_ACCTON_AS7712_32x_PSU
+   tristate "Accton as7712 32x psu"
+   depends on I2C && SENSORS_ACCTON_I2C_CPLD
+   help
+     If you say yes here you get support for Accton as7712 32x psu.
+
+     This driver can also be built as a module. If so, the module will
+     be called accton_as7712_32x_psu.    
+
+
 if ACPI
 
 comment "ACPI drivers"
diff --git a/drivers/hwmon/Makefile b/drivers/hwmon/Makefile
index 3dc0f02..89268cf 100644
--- a/drivers/hwmon/Makefile
+++ b/drivers/hwmon/Makefile
@@ -149,6 +149,10 @@ obj-$(CONFIG_SENSORS_W83L786NG)	+= w83l786ng.o
 obj-$(CONFIG_SENSORS_WM831X)	+= wm831x-hwmon.o
 obj-$(CONFIG_SENSORS_WM8350)	+= wm8350-hwmon.o
 
+obj-$(CONFIG_SENSORS_ACCTON_I2C_CPLD) += accton_i2c_cpld.o
+obj-$(CONFIG_SENSORS_ACCTON_AS7712_32x_FAN)    += accton_as7712_32x_fan.o
+obj-$(CONFIG_SENSORS_ACCTON_AS7712_32x_PSU)    += accton_as7712_32x_psu.o
+
 obj-$(CONFIG_PMBUS)		+= pmbus/
 
 ccflags-$(CONFIG_HWMON_DEBUG_CHIP) := -DDEBUG
diff --git a/drivers/hwmon/accton_as7712_32x_fan.c b/drivers/hwmon/accton_as7712_32x_fan.c
new file mode 100644
index 0000000..52db1e9
--- /dev/null
+++ b/drivers/hwmon/accton_as7712_32x_fan.c
@@ -0,0 +1,452 @@
+/*
+ * A hwmon driver for the Accton as7712 32x fan
+ *
+ * Copyright (C) 2014 Accton Technology Corporation.
+ * Brandon Chuang <brandon_chuang@accton.com.tw>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/module.h>
+#include <linux/jiffies.h>
+#include <linux/i2c.h>
+#include <linux/hwmon.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/err.h>
+#include <linux/mutex.h>
+#include <linux/sysfs.h>
+#include <linux/slab.h>
+#include <linux/dmi.h>
+
+#define DRVNAME "as7712_32x_fan"
+
+static struct as7712_32x_fan_data *as7712_32x_fan_update_device(struct device *dev);                    
+static ssize_t fan_show_value(struct device *dev, struct device_attribute *da, char *buf);
+static ssize_t set_duty_cycle(struct device *dev, struct device_attribute *da,
+            const char *buf, size_t count);
+extern int accton_i2c_cpld_read(unsigned short cpld_addr, u8 reg);
+extern int accton_i2c_cpld_write(unsigned short cpld_addr, u8 reg, u8 value);
+
+/* fan related data, the index should match sysfs_fan_attributes
+ */
+static const u8 fan_reg[] = {
+    0x0F,       /* fan 1-6 present status */
+    0x11,       /* fan PWM(for all fan) */
+    0x12,       /* front fan 1 speed(rpm) */
+    0x13,       /* front fan 2 speed(rpm) */
+    0x14,       /* front fan 3 speed(rpm) */
+    0x15,       /* front fan 4 speed(rpm) */
+    0x16,       /* front fan 5 speed(rpm) */
+    0x17,       /* front fan 6 speed(rpm) */
+    0x22,       /* rear fan 1 speed(rpm) */
+    0x23,       /* rear fan 2 speed(rpm) */
+    0x24,       /* rear fan 3 speed(rpm) */
+    0x25,       /* rear fan 4 speed(rpm) */
+    0x26,       /* rear fan 5 speed(rpm) */
+    0x27,       /* rear fan 6 speed(rpm) */
+};
+
+/* Each client has this additional data */
+struct as7712_32x_fan_data {
+    struct device   *hwmon_dev;
+    struct mutex     update_lock;
+    char             valid;           /* != 0 if registers are valid */
+    unsigned long    last_updated;    /* In jiffies */
+    u8               reg_val[ARRAY_SIZE(fan_reg)]; /* Register value */
+};
+
+enum fan_id {
+    FAN1_ID,
+    FAN2_ID,
+    FAN3_ID,
+    FAN4_ID,
+    FAN5_ID,
+    FAN6_ID
+};
+
+enum sysfs_fan_attributes {
+    FAN_PRESENT_REG,
+    FAN_DUTY_CYCLE_PERCENTAGE, /* Only one CPLD register to control duty cycle for all fans */
+    FAN1_FRONT_SPEED_RPM,
+    FAN2_FRONT_SPEED_RPM,
+    FAN3_FRONT_SPEED_RPM,
+    FAN4_FRONT_SPEED_RPM,
+    FAN5_FRONT_SPEED_RPM,
+    FAN6_FRONT_SPEED_RPM,
+    FAN1_REAR_SPEED_RPM,
+    FAN2_REAR_SPEED_RPM,
+    FAN3_REAR_SPEED_RPM,
+    FAN4_REAR_SPEED_RPM,
+    FAN5_REAR_SPEED_RPM,
+    FAN6_REAR_SPEED_RPM,
+    FAN1_PRESENT,
+    FAN2_PRESENT,
+    FAN3_PRESENT,
+    FAN4_PRESENT,
+    FAN5_PRESENT,
+    FAN6_PRESENT,
+    FAN1_FAULT,
+    FAN2_FAULT,
+    FAN3_FAULT,
+    FAN4_FAULT,
+    FAN5_FAULT,
+    FAN6_FAULT
+};
+
+/* Define attributes
+ */
+#define DECLARE_FAN_FAULT_SENSOR_DEV_ATTR(index) \
+    static SENSOR_DEVICE_ATTR(fan##index##_fault, S_IRUGO, fan_show_value, NULL, FAN##index##_FAULT)
+#define DECLARE_FAN_FAULT_ATTR(index)      &sensor_dev_attr_fan##index##_fault.dev_attr.attr
+
+#define DECLARE_FAN_DIRECTION_SENSOR_DEV_ATTR(index) \
+    static SENSOR_DEVICE_ATTR(fan##index##_direction, S_IRUGO, fan_show_value, NULL, FAN##index##_DIRECTION)
+#define DECLARE_FAN_DIRECTION_ATTR(index)  &sensor_dev_attr_fan##index##_direction.dev_attr.attr
+
+#define DECLARE_FAN_DUTY_CYCLE_SENSOR_DEV_ATTR(index) \
+    static SENSOR_DEVICE_ATTR(fan##index##_duty_cycle_percentage, S_IWUSR | S_IRUGO, fan_show_value, set_duty_cycle, FAN##index##_DUTY_CYCLE_PERCENTAGE)
+#define DECLARE_FAN_DUTY_CYCLE_ATTR(index) &sensor_dev_attr_fan##index##_duty_cycle_percentage.dev_attr.attr
+
+#define DECLARE_FAN_PRESENT_SENSOR_DEV_ATTR(index) \
+    static SENSOR_DEVICE_ATTR(fan##index##_present, S_IRUGO, fan_show_value, NULL, FAN##index##_PRESENT)
+#define DECLARE_FAN_PRESENT_ATTR(index)      &sensor_dev_attr_fan##index##_present.dev_attr.attr
+
+#define DECLARE_FAN_SPEED_RPM_SENSOR_DEV_ATTR(index) \
+    static SENSOR_DEVICE_ATTR(fan##index##_front_speed_rpm, S_IRUGO, fan_show_value, NULL, FAN##index##_FRONT_SPEED_RPM);\
+    static SENSOR_DEVICE_ATTR(fan##index##_rear_speed_rpm, S_IRUGO, fan_show_value, NULL, FAN##index##_REAR_SPEED_RPM)
+#define DECLARE_FAN_SPEED_RPM_ATTR(index)  &sensor_dev_attr_fan##index##_front_speed_rpm.dev_attr.attr, \
+                                           &sensor_dev_attr_fan##index##_rear_speed_rpm.dev_attr.attr
+
+/* 6 fan fault attributes in this platform */
+DECLARE_FAN_FAULT_SENSOR_DEV_ATTR(1);
+DECLARE_FAN_FAULT_SENSOR_DEV_ATTR(2);
+DECLARE_FAN_FAULT_SENSOR_DEV_ATTR(3);
+DECLARE_FAN_FAULT_SENSOR_DEV_ATTR(4);
+DECLARE_FAN_FAULT_SENSOR_DEV_ATTR(5);
+DECLARE_FAN_FAULT_SENSOR_DEV_ATTR(6); 
+/* 6 fan speed(rpm) attributes in this platform */
+DECLARE_FAN_SPEED_RPM_SENSOR_DEV_ATTR(1);
+DECLARE_FAN_SPEED_RPM_SENSOR_DEV_ATTR(2);
+DECLARE_FAN_SPEED_RPM_SENSOR_DEV_ATTR(3);
+DECLARE_FAN_SPEED_RPM_SENSOR_DEV_ATTR(4);
+DECLARE_FAN_SPEED_RPM_SENSOR_DEV_ATTR(5);
+DECLARE_FAN_SPEED_RPM_SENSOR_DEV_ATTR(6);
+/* 6 fan present attributes in this platform */
+DECLARE_FAN_PRESENT_SENSOR_DEV_ATTR(1);
+DECLARE_FAN_PRESENT_SENSOR_DEV_ATTR(2);
+DECLARE_FAN_PRESENT_SENSOR_DEV_ATTR(3);
+DECLARE_FAN_PRESENT_SENSOR_DEV_ATTR(4);
+DECLARE_FAN_PRESENT_SENSOR_DEV_ATTR(5);
+DECLARE_FAN_PRESENT_SENSOR_DEV_ATTR(6);
+/* 1 fan duty cycle attribute in this platform */
+DECLARE_FAN_DUTY_CYCLE_SENSOR_DEV_ATTR();
+
+static struct attribute *as7712_32x_fan_attributes[] = {
+    /* fan related attributes */
+    DECLARE_FAN_FAULT_ATTR(1),
+    DECLARE_FAN_FAULT_ATTR(2),
+    DECLARE_FAN_FAULT_ATTR(3),
+    DECLARE_FAN_FAULT_ATTR(4),
+    DECLARE_FAN_FAULT_ATTR(5),
+    DECLARE_FAN_FAULT_ATTR(6),
+    DECLARE_FAN_SPEED_RPM_ATTR(1),
+    DECLARE_FAN_SPEED_RPM_ATTR(2),
+    DECLARE_FAN_SPEED_RPM_ATTR(3),
+    DECLARE_FAN_SPEED_RPM_ATTR(4),
+    DECLARE_FAN_SPEED_RPM_ATTR(5),
+    DECLARE_FAN_SPEED_RPM_ATTR(6),
+    DECLARE_FAN_PRESENT_ATTR(1),
+    DECLARE_FAN_PRESENT_ATTR(2),
+    DECLARE_FAN_PRESENT_ATTR(3),
+    DECLARE_FAN_PRESENT_ATTR(4),
+    DECLARE_FAN_PRESENT_ATTR(5),
+    DECLARE_FAN_PRESENT_ATTR(6),
+    DECLARE_FAN_DUTY_CYCLE_ATTR(),
+    NULL
+};
+
+#define FAN_DUTY_CYCLE_REG_MASK         0xF
+#define FAN_MAX_DUTY_CYCLE              100
+#define FAN_REG_VAL_TO_SPEED_RPM_STEP   100
+
+static int as7712_32x_fan_read_value(struct i2c_client *client, u8 reg)
+{
+    return i2c_smbus_read_byte_data(client, reg);
+}
+
+static int as7712_32x_fan_write_value(struct i2c_client *client, u8 reg, u8 value)
+{
+    return i2c_smbus_write_byte_data(client, reg, value);
+}
+
+/* fan utility functions
+ */
+static u32 reg_val_to_duty_cycle(u8 reg_val) 
+{
+    reg_val &= FAN_DUTY_CYCLE_REG_MASK;
+    return ((u32)(reg_val+1) * 625 + 75)/ 100;
+}
+
+static u8 duty_cycle_to_reg_val(u8 duty_cycle) 
+{
+    return ((u32)duty_cycle * 100 / 625) - 1;
+}
+
+static u32 reg_val_to_speed_rpm(u8 reg_val)
+{
+    return (u32)reg_val * FAN_REG_VAL_TO_SPEED_RPM_STEP;
+}
+
+static u8 reg_val_to_is_present(u8 reg_val, enum fan_id id)
+{
+    u8 mask = (1 << id);
+
+    reg_val &= mask;
+
+    return reg_val ? 0 : 1;
+}
+
+static u8 is_fan_fault(struct as7712_32x_fan_data *data, enum fan_id id)
+{
+    u8 ret = 1;
+    int front_fan_index = FAN1_FRONT_SPEED_RPM + id;
+    int rear_fan_index  = FAN1_REAR_SPEED_RPM  + id;
+
+    /* Check if the speed of front or rear fan is ZERO,  
+     */
+    if (reg_val_to_speed_rpm(data->reg_val[front_fan_index]) &&
+        reg_val_to_speed_rpm(data->reg_val[rear_fan_index]))  {
+        ret = 0;
+    }
+
+    return ret;
+}
+
+static ssize_t set_duty_cycle(struct device *dev, struct device_attribute *da,
+            const char *buf, size_t count) 
+{
+    int error, value;
+    struct i2c_client *client = to_i2c_client(dev);
+    
+    error = kstrtoint(buf, 10, &value);
+    if (error)
+        return error;
+        
+    if (value < 0 || value > FAN_MAX_DUTY_CYCLE)
+        return -EINVAL;
+	
+    as7712_32x_fan_write_value(client, 0x33, 0); /* Disable fan speed watch dog */
+    as7712_32x_fan_write_value(client, fan_reg[FAN_DUTY_CYCLE_PERCENTAGE], duty_cycle_to_reg_val(value));
+    return count;
+}
+
+static ssize_t fan_show_value(struct device *dev, struct device_attribute *da,
+             char *buf)
+{
+    struct sensor_device_attribute *attr = to_sensor_dev_attr(da);
+    struct as7712_32x_fan_data *data = as7712_32x_fan_update_device(dev);
+    ssize_t ret = 0;
+    
+    if (data->valid) {
+        switch (attr->index) {
+            case FAN_DUTY_CYCLE_PERCENTAGE:
+            {
+                u32 duty_cycle = reg_val_to_duty_cycle(data->reg_val[FAN_DUTY_CYCLE_PERCENTAGE]);
+                ret = sprintf(buf, "%u\n", duty_cycle);
+                break;
+            }
+            case FAN1_FRONT_SPEED_RPM:
+            case FAN2_FRONT_SPEED_RPM:
+            case FAN3_FRONT_SPEED_RPM:
+            case FAN4_FRONT_SPEED_RPM:
+            case FAN5_FRONT_SPEED_RPM:
+            case FAN6_FRONT_SPEED_RPM:
+            case FAN1_REAR_SPEED_RPM:
+            case FAN2_REAR_SPEED_RPM:
+            case FAN3_REAR_SPEED_RPM:
+            case FAN4_REAR_SPEED_RPM:
+            case FAN5_REAR_SPEED_RPM:
+            case FAN6_REAR_SPEED_RPM:
+                ret = sprintf(buf, "%u\n", reg_val_to_speed_rpm(data->reg_val[attr->index]));
+                break;
+            case FAN1_PRESENT:
+            case FAN2_PRESENT:
+            case FAN3_PRESENT:
+            case FAN4_PRESENT:
+            case FAN5_PRESENT:
+            case FAN6_PRESENT:
+                ret = sprintf(buf, "%d\n",
+                              reg_val_to_is_present(data->reg_val[FAN_PRESENT_REG],
+                              attr->index - FAN1_PRESENT));
+                break;
+            case FAN1_FAULT:
+            case FAN2_FAULT:
+            case FAN3_FAULT:
+            case FAN4_FAULT:
+            case FAN5_FAULT:
+            case FAN6_FAULT:
+                ret = sprintf(buf, "%d\n", is_fan_fault(data, attr->index - FAN1_FAULT));
+                break;
+            default:
+                break;
+        }        
+    }
+    
+    return ret;
+}
+
+static const struct attribute_group as7712_32x_fan_group = {
+    .attrs = as7712_32x_fan_attributes,
+};
+
+static struct as7712_32x_fan_data *as7712_32x_fan_update_device(struct device *dev)
+{
+    struct i2c_client *client = to_i2c_client(dev);
+    struct as7712_32x_fan_data *data = i2c_get_clientdata(client);
+
+    mutex_lock(&data->update_lock);
+
+    if (time_after(jiffies, data->last_updated + HZ + HZ / 2) || 
+        !data->valid) {
+        int i;
+
+        dev_dbg(&client->dev, "Starting as7712_32x_fan update\n");
+        data->valid = 0;
+        
+        /* Update fan data
+         */
+        for (i = 0; i < ARRAY_SIZE(data->reg_val); i++) {
+            int status = as7712_32x_fan_read_value(client, fan_reg[i]);
+            
+            if (status < 0) {
+                data->valid = 0;
+                mutex_unlock(&data->update_lock);
+                dev_dbg(&client->dev, "reg %d, err %d\n", fan_reg[i], status);
+                return data;
+            }
+            else {
+                data->reg_val[i] = status;
+            }
+        }
+        
+        data->last_updated = jiffies;
+        data->valid = 1;
+    }
+    
+    mutex_unlock(&data->update_lock);
+
+    return data;
+}
+
+static int as7712_32x_fan_probe(struct i2c_client *client,
+            const struct i2c_device_id *dev_id)
+{
+    struct as7712_32x_fan_data *data;
+    int status;
+
+    if (!i2c_check_functionality(client->adapter, I2C_FUNC_SMBUS_BYTE_DATA)) {
+        status = -EIO;
+        goto exit;
+    }
+
+    data = kzalloc(sizeof(struct as7712_32x_fan_data), GFP_KERNEL);
+    if (!data) {
+        status = -ENOMEM;
+        goto exit;
+    }
+
+    i2c_set_clientdata(client, data);
+    data->valid = 0;
+    mutex_init(&data->update_lock);
+
+    dev_info(&client->dev, "chip found\n");
+
+    /* Register sysfs hooks */
+    status = sysfs_create_group(&client->dev.kobj, &as7712_32x_fan_group);
+    if (status) {
+        goto exit_free;
+    }
+
+    data->hwmon_dev = hwmon_device_register(&client->dev);
+    if (IS_ERR(data->hwmon_dev)) {
+        status = PTR_ERR(data->hwmon_dev);
+        goto exit_remove;
+    }
+
+    dev_info(&client->dev, "%s: fan '%s'\n",
+         dev_name(data->hwmon_dev), client->name);
+    
+    return 0;
+
+exit_remove:
+    sysfs_remove_group(&client->dev.kobj, &as7712_32x_fan_group);
+exit_free:
+    kfree(data);
+exit:
+    
+    return status;
+}
+
+static int as7712_32x_fan_remove(struct i2c_client *client)
+{
+    struct as7712_32x_fan_data *data = i2c_get_clientdata(client);
+    hwmon_device_unregister(data->hwmon_dev);
+    sysfs_remove_group(&client->dev.kobj, &as7712_32x_fan_group);
+    
+    return 0;
+}
+
+/* Addresses to scan */
+static const unsigned short normal_i2c[] = { 0x66, I2C_CLIENT_END };
+
+static const struct i2c_device_id as7712_32x_fan_id[] = {
+    { "as7712_32x_fan", 0 },
+    {}
+};
+MODULE_DEVICE_TABLE(i2c, as7712_32x_fan_id);
+
+static struct i2c_driver as7712_32x_fan_driver = {
+    .class        = I2C_CLASS_HWMON,
+    .driver = {
+        .name     = DRVNAME,
+    },
+    .probe        = as7712_32x_fan_probe,
+    .remove       = as7712_32x_fan_remove,
+    .id_table     = as7712_32x_fan_id,
+    .address_list = normal_i2c,
+};
+
+static int __init as7712_32x_fan_init(void)
+{
+	extern int platform_accton_as7712_32x(void);
+	if (!platform_accton_as7712_32x()) {
+		return -ENODEV;
+	}
+
+    return i2c_add_driver(&as7712_32x_fan_driver);
+}
+
+static void __exit as7712_32x_fan_exit(void)
+{
+    i2c_del_driver(&as7712_32x_fan_driver);
+}
+
+module_init(as7712_32x_fan_init);
+module_exit(as7712_32x_fan_exit);
+
+MODULE_AUTHOR("Brandon Chuang <brandon_chuang@accton.com.tw>");
+MODULE_DESCRIPTION("as7712_32x_fan driver");
+MODULE_LICENSE("GPL");
+
diff --git a/drivers/hwmon/accton_as7712_32x_psu.c b/drivers/hwmon/accton_as7712_32x_psu.c
new file mode 100644
index 0000000..8c9230a
--- /dev/null
+++ b/drivers/hwmon/accton_as7712_32x_psu.c
@@ -0,0 +1,293 @@
+/*
+ * An hwmon driver for accton as7712_32x Power Module
+ *
+ * Copyright (C) 2014 Accton Technology Corporation.
+ * Brandon Chuang <brandon_chuang@accton.com.tw>
+ *
+ * Based on ad7414.c
+ * Copyright 2006 Stefan Roese <sr at denx.de>, DENX Software Engineering
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/module.h>
+#include <linux/jiffies.h>
+#include <linux/i2c.h>
+#include <linux/hwmon.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/err.h>
+#include <linux/mutex.h>
+#include <linux/sysfs.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
+#include <linux/dmi.h>
+
+static ssize_t show_status(struct device *dev, struct device_attribute *da, char *buf);
+static ssize_t show_model_name(struct device *dev, struct device_attribute *da, char *buf);
+static int as7712_32x_psu_read_block(struct i2c_client *client, u8 command, u8 *data,int data_len);
+extern int accton_i2c_cpld_read(unsigned short cpld_addr, u8 reg);
+
+/* Addresses scanned 
+ */
+static const unsigned short normal_i2c[] = { 0x50, 0x53, I2C_CLIENT_END };
+
+/* Each client has this additional data 
+ */
+struct as7712_32x_psu_data {
+    struct device      *hwmon_dev;
+    struct mutex        update_lock;
+    char                valid;           /* !=0 if registers are valid */
+    unsigned long       last_updated;    /* In jiffies */
+    u8  index;           /* PSU index */
+    u8  status;          /* Status(present/power_good) register read from CPLD */
+    char model_name[9]; /* Model name, read from eeprom */
+};
+
+static struct as7712_32x_psu_data *as7712_32x_psu_update_device(struct device *dev);             
+
+enum as7712_32x_psu_sysfs_attributes {
+    PSU_PRESENT,
+    PSU_MODEL_NAME,
+    PSU_POWER_GOOD
+};
+
+/* sysfs attributes for hwmon 
+ */
+static SENSOR_DEVICE_ATTR(psu_present,    S_IRUGO, show_status,    NULL, PSU_PRESENT);
+static SENSOR_DEVICE_ATTR(psu_model_name, S_IRUGO, show_model_name,NULL, PSU_MODEL_NAME);
+static SENSOR_DEVICE_ATTR(psu_power_good, S_IRUGO, show_status,    NULL, PSU_POWER_GOOD);
+
+static struct attribute *as7712_32x_psu_attributes[] = {
+    &sensor_dev_attr_psu_present.dev_attr.attr,
+    &sensor_dev_attr_psu_model_name.dev_attr.attr,
+    &sensor_dev_attr_psu_power_good.dev_attr.attr,
+    NULL
+};
+
+static ssize_t show_status(struct device *dev, struct device_attribute *da,
+             char *buf)
+{
+    struct sensor_device_attribute *attr = to_sensor_dev_attr(da);
+    struct as7712_32x_psu_data *data = as7712_32x_psu_update_device(dev);
+    u8 status = 0;
+
+    if (attr->index == PSU_PRESENT) {
+        status = !(data->status >> (1-data->index) & 0x1);
+    }
+    else { /* PSU_POWER_GOOD */
+        status = (data->status >> (3-data->index) & 0x1);
+    }
+
+    return sprintf(buf, "%d\n", status);
+}
+
+static ssize_t show_model_name(struct device *dev, struct device_attribute *da,
+             char *buf)
+{
+    struct as7712_32x_psu_data *data = as7712_32x_psu_update_device(dev);
+    
+    return sprintf(buf, "%s\n", data->model_name);
+}
+
+static const struct attribute_group as7712_32x_psu_group = {
+    .attrs = as7712_32x_psu_attributes,
+};
+
+static int as7712_32x_psu_probe(struct i2c_client *client,
+            const struct i2c_device_id *dev_id)
+{
+    struct as7712_32x_psu_data *data;
+    int status;
+
+    if (!i2c_check_functionality(client->adapter, I2C_FUNC_SMBUS_I2C_BLOCK)) {
+        status = -EIO;
+        goto exit;
+    }
+
+    data = kzalloc(sizeof(struct as7712_32x_psu_data), GFP_KERNEL);
+    if (!data) {
+        status = -ENOMEM;
+        goto exit;
+    }
+
+    i2c_set_clientdata(client, data);
+    data->valid = 0;
+    data->index = dev_id->driver_data;
+    mutex_init(&data->update_lock);
+
+    dev_info(&client->dev, "chip found\n");
+
+    /* Register sysfs hooks */
+    status = sysfs_create_group(&client->dev.kobj, &as7712_32x_psu_group);
+    if (status) {
+        goto exit_free;
+    }
+
+    data->hwmon_dev = hwmon_device_register(&client->dev);
+    if (IS_ERR(data->hwmon_dev)) {
+        status = PTR_ERR(data->hwmon_dev);
+        goto exit_remove;
+    }
+
+    dev_info(&client->dev, "%s: psu '%s'\n",
+         dev_name(data->hwmon_dev), client->name);
+    
+    return 0;
+
+exit_remove:
+    sysfs_remove_group(&client->dev.kobj, &as7712_32x_psu_group);
+exit_free:
+    kfree(data);
+exit:
+    
+    return status;
+}
+
+static int as7712_32x_psu_remove(struct i2c_client *client)
+{
+    struct as7712_32x_psu_data *data = i2c_get_clientdata(client);
+
+    hwmon_device_unregister(data->hwmon_dev);
+    sysfs_remove_group(&client->dev.kobj, &as7712_32x_psu_group);
+    kfree(data);
+    
+    return 0;
+}
+
+enum psu_index 
+{ 
+    as7712_32x_psu1, 
+    as7712_32x_psu2
+};
+
+static const struct i2c_device_id as7712_32x_psu_id[] = {
+    { "as7712_32x_psu1", as7712_32x_psu1 },
+    { "as7712_32x_psu2", as7712_32x_psu2 },
+    {}
+};
+MODULE_DEVICE_TABLE(i2c, as7712_32x_psu_id);
+
+static struct i2c_driver as7712_32x_psu_driver = {
+    .class        = I2C_CLASS_HWMON,
+    .driver = {
+        .name     = "as7712_32x_psu",
+    },
+    .probe        = as7712_32x_psu_probe,
+    .remove       = as7712_32x_psu_remove,
+    .id_table     = as7712_32x_psu_id,
+    .address_list = normal_i2c,
+};
+
+static int as7712_32x_psu_read_block(struct i2c_client *client, u8 command, u8 *data,
+              int data_len)
+{
+    int result = 0;
+    int retry_count = 5;
+	
+	while (retry_count) {
+	    retry_count--;
+	
+	    result = i2c_smbus_read_i2c_block_data(client, command, data_len, data);
+		
+		if (unlikely(result < 0)) {
+		    msleep(10);
+	        continue;
+		}
+		
+        if (unlikely(result != data_len)) {
+            result = -EIO;
+			msleep(10);
+            continue;
+        }
+		
+		result = 0;
+		break;
+	}
+	
+    return result;
+}
+
+static struct as7712_32x_psu_data *as7712_32x_psu_update_device(struct device *dev)
+{
+    struct i2c_client *client = to_i2c_client(dev);
+    struct as7712_32x_psu_data *data = i2c_get_clientdata(client);
+    
+    mutex_lock(&data->update_lock);
+
+    if (time_after(jiffies, data->last_updated + HZ + HZ / 2)
+        || !data->valid) {
+        int status;
+		int power_good = 0;
+
+        dev_dbg(&client->dev, "Starting as7712_32x update\n");
+
+        /* Read psu status */
+        status = accton_i2c_cpld_read(0x60, 0x2);
+        
+        if (status < 0) {
+            dev_dbg(&client->dev, "cpld reg 0x60 err %d\n", status);
+        }
+        else {
+            data->status = status;
+        }
+		
+        /* Read model name */
+        memset(data->model_name, 0, sizeof(data->model_name));
+        power_good = (data->status >> (3-data->index) & 0x1);
+		
+        if (power_good) {
+            status = as7712_32x_psu_read_block(client, 0x20, data->model_name, 
+                                               ARRAY_SIZE(data->model_name)-1);
+
+            if (status < 0) {
+                data->model_name[0] = '\0';
+                dev_dbg(&client->dev, "unable to read model name from (0x%x)\n", client->addr);
+            }
+            else {
+                data->model_name[ARRAY_SIZE(data->model_name)-1] = '\0';
+            }
+        }
+        
+        data->last_updated = jiffies;
+        data->valid = 1;
+    }
+
+    mutex_unlock(&data->update_lock);
+
+    return data;
+}
+
+static int __init as7712_32x_psu_init(void)
+{
+	extern int platform_accton_as7712_32x(void);
+	if (!platform_accton_as7712_32x()) {
+		return -ENODEV;
+	}
+
+    return i2c_add_driver(&as7712_32x_psu_driver);
+}
+
+static void __exit as7712_32x_psu_exit(void)
+{
+    i2c_del_driver(&as7712_32x_psu_driver);
+}
+
+module_init(as7712_32x_psu_init);
+module_exit(as7712_32x_psu_exit);
+
+MODULE_AUTHOR("Brandon Chuang <brandon_chuang@accton.com.tw>");
+MODULE_DESCRIPTION("as7712_32x_psu driver");
+MODULE_LICENSE("GPL");
+
diff --git a/drivers/hwmon/accton_i2c_cpld.c b/drivers/hwmon/accton_i2c_cpld.c
new file mode 100644
index 0000000..b25bf1c
--- /dev/null
+++ b/drivers/hwmon/accton_i2c_cpld.c
@@ -0,0 +1,259 @@
+/*
+ * A hwmon driver for the accton_i2c_cpld
+ *
+ * Copyright (C) 2014 Accton Technology Corporation.
+ * Brandon Chuang <brandon_chuang@accton.com.tw>
+ *
+ * Based on ad7414.c
+ * Copyright 2006 Stefan Roese <sr at denx.de>, DENX Software Engineering
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/module.h>
+#include <linux/i2c.h>
+#include <linux/slab.h>
+#include <linux/list.h>
+#include <linux/dmi.h>
+#include <linux/hwmon.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/err.h>
+#include <linux/mutex.h>
+
+#define CPLD_VERSION_REG    0x1
+
+enum as5712_54x_cpld_sysfs_attributes {
+    CPLD_READ_VERSION,
+    CPLD_BYTE_ACCESS,
+    CPLD_DUMP_ALL,
+};
+
+static ssize_t read_cpld_version(struct device *dev, struct device_attribute *da,
+             char *buf);
+int accton_i2c_cpld_read(unsigned short cpld_addr, u8 reg);
+
+
+static LIST_HEAD(cpld_client_list);
+static struct mutex	 list_lock;
+
+struct cpld_client_node {
+	struct i2c_client *client;
+	struct list_head   list;
+};
+
+/* Addresses scanned for accton_i2c_cpld
+ */
+static const unsigned short normal_i2c[] = { 0x31, 0x35, 0x60, 0x61, 0x62, I2C_CLIENT_END };
+
+static SENSOR_DEVICE_ATTR(cpld_get_version,  S_IRUGO, read_cpld_version, NULL, CPLD_READ_VERSION);
+
+static struct attribute *as5712_54x_cpld_attributes[] = {
+    &sensor_dev_attr_cpld_get_version.dev_attr.attr,
+    NULL
+};
+
+static const struct attribute_group as5712_54x_cpld_group = {
+    .attrs = as5712_54x_cpld_attributes,
+};
+
+static ssize_t read_cpld_version(struct device *dev, struct device_attribute *da,
+             char *buf)
+{
+    struct sensor_device_attribute *attr = to_sensor_dev_attr(da);
+    struct i2c_client *client = to_i2c_client(dev);   
+    unsigned short cpld_reg = CPLD_VERSION_REG; 
+    u8 reg;
+
+    if(attr->index == CPLD_READ_VERSION) {
+        reg = accton_i2c_cpld_read(client->addr, cpld_reg);
+        return sprintf(buf, "%02x\n",reg);
+    }
+    return -1 ;
+}
+
+
+static void accton_i2c_cpld_add_client(struct i2c_client *client)
+{
+	struct cpld_client_node *node = kzalloc(sizeof(struct cpld_client_node), GFP_KERNEL);
+	
+	if (!node) {
+		dev_dbg(&client->dev, "Can't allocate cpld_client_node (0x%x)\n", client->addr);
+		return;
+	}
+	
+	node->client = client;
+	
+	mutex_lock(&list_lock);
+	list_add(&node->list, &cpld_client_list);
+	mutex_unlock(&list_lock);
+}
+
+static void accton_i2c_cpld_remove_client(struct i2c_client *client)
+{
+	struct list_head		*list_node = NULL;
+	struct cpld_client_node *cpld_node = NULL;
+	int found = 0;
+	
+	mutex_lock(&list_lock);
+
+	list_for_each(list_node, &cpld_client_list)
+	{
+		cpld_node = list_entry(list_node, struct cpld_client_node, list);
+		
+		if (cpld_node->client == client) {
+			found = 1;
+			break;
+		}
+	}
+	
+	if (found) {
+		list_del(list_node);
+		kfree(cpld_node);
+	}
+	
+	mutex_unlock(&list_lock);
+}
+
+static int accton_i2c_cpld_probe(struct i2c_client *client,
+			const struct i2c_device_id *dev_id)
+{
+	int status;
+	
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_SMBUS_BYTE_DATA)) {
+		dev_dbg(&client->dev, "i2c_check_functionality failed (0x%x)\n", client->addr);
+		status = -EIO;
+		goto exit;
+	}
+	
+    /* Register sysfs hooks */
+    status = sysfs_create_group(&client->dev.kobj, &as5712_54x_cpld_group);
+    if (status) {
+		goto exit;
+    }
+
+	dev_info(&client->dev, "chip found\n");
+	accton_i2c_cpld_add_client(client);
+	
+	return 0; 
+exit:
+	return status;
+}
+
+static int accton_i2c_cpld_remove(struct i2c_client *client)
+{
+    sysfs_remove_group(&client->dev.kobj, &as5712_54x_cpld_group);    
+  
+	accton_i2c_cpld_remove_client(client);	
+	return 0;
+}
+
+static const struct i2c_device_id accton_i2c_cpld_id[] = {
+	{ "accton_i2c_cpld", 0 },
+	{}
+};
+MODULE_DEVICE_TABLE(i2c, accton_i2c_cpld_id);
+
+static struct i2c_driver accton_i2c_cpld_driver = {
+	.class		= I2C_CLASS_HWMON,
+	.driver = {
+		.name = "accton_i2c_cpld",
+	},
+	.probe		= accton_i2c_cpld_probe,
+	.remove	   	= accton_i2c_cpld_remove,
+	.id_table	= accton_i2c_cpld_id,
+	.address_list = normal_i2c,
+};
+
+int accton_i2c_cpld_read(unsigned short cpld_addr, u8 reg)
+{
+	struct list_head   *list_node = NULL;
+	struct cpld_client_node *cpld_node = NULL;
+	int ret = -EPERM;
+	
+	mutex_lock(&list_lock);
+
+	list_for_each(list_node, &cpld_client_list)
+	{
+		cpld_node = list_entry(list_node, struct cpld_client_node, list);
+		
+		if (cpld_node->client->addr == cpld_addr) {
+			ret = i2c_smbus_read_byte_data(cpld_node->client, reg);
+			break;
+		}
+	}
+	
+	mutex_unlock(&list_lock);
+
+	return ret;
+}
+EXPORT_SYMBOL(accton_i2c_cpld_read);
+
+int accton_i2c_cpld_write(unsigned short cpld_addr, u8 reg, u8 value)
+{
+	struct list_head   *list_node = NULL;
+	struct cpld_client_node *cpld_node = NULL;
+	int ret = -EIO;
+	
+	mutex_lock(&list_lock);
+
+	list_for_each(list_node, &cpld_client_list)
+	{
+		cpld_node = list_entry(list_node, struct cpld_client_node, list);
+		
+		if (cpld_node->client->addr == cpld_addr) {
+			ret = i2c_smbus_write_byte_data(cpld_node->client, reg, value);
+			break;
+		}
+	}
+	
+	mutex_unlock(&list_lock);
+
+	return ret;
+}
+EXPORT_SYMBOL(accton_i2c_cpld_write);
+
+static int __init accton_i2c_cpld_init(void)
+{
+	mutex_init(&list_lock);
+	return i2c_add_driver(&accton_i2c_cpld_driver);
+}
+
+static void __exit accton_i2c_cpld_exit(void)
+{
+	i2c_del_driver(&accton_i2c_cpld_driver);
+}
+	
+static struct dmi_system_id as7712_dmi_table[] = {
+	{
+		.ident = "Accton AS7712",
+		.matches = {
+			DMI_MATCH(DMI_SYS_VENDOR, "Accton"),
+			DMI_MATCH(DMI_PRODUCT_NAME, "AS7712"),
+		},
+	}
+};
+
+int platform_accton_as7712_32x(void)
+{
+	return dmi_check_system(as7712_dmi_table);
+}
+EXPORT_SYMBOL(platform_accton_as7712_32x);
+
+MODULE_AUTHOR("Brandon Chuang <brandon_chuang@accton.com.tw>");
+MODULE_DESCRIPTION("accton_i2c_cpld driver");
+MODULE_LICENSE("GPL");
+
+module_init(accton_i2c_cpld_init);
+module_exit(accton_i2c_cpld_exit);
diff --git a/drivers/leds/Kconfig b/drivers/leds/Kconfig
index a1b044e..d821836 100644
--- a/drivers/leds/Kconfig
+++ b/drivers/leds/Kconfig
@@ -40,6 +40,14 @@ config LEDS_ATMEL_PWM
 	  This option enables support for LEDs driven using outputs
 	  of the dedicated PWM controller found on newer Atmel SOCs.
 
+config LEDS_ACCTON_AS7712_32x
+        tristate "LED support for the Accton as7712 32x"
+        depends on LEDS_CLASS && SENSORS_ACCTON_I2C_CPLD
+        help
+          This option enables support for the LEDs on the Accton as7712 32x.
+          Say Y to enable LEDs on the Accton as7712 32x.
+
+
 config LEDS_LM3530
 	tristate "LCD Backlight driver for LM3530"
 	depends on LEDS_CLASS
diff --git a/drivers/leds/Makefile b/drivers/leds/Makefile
index 79c5155..a82f267 100644
--- a/drivers/leds/Makefile
+++ b/drivers/leds/Makefile
@@ -54,6 +54,7 @@ obj-$(CONFIG_LEDS_MAX8997)		+= leds-max8997.o
 obj-$(CONFIG_LEDS_LM355x)		+= leds-lm355x.o
 obj-$(CONFIG_LEDS_BLINKM)		+= leds-blinkm.o
 obj-$(CONFIG_LEDS_VERSATILE)		+= leds-versatile.o
+obj-$(CONFIG_LEDS_ACCTON_AS7712_32x)    += leds-accton_as7712_32x.o
 
 # LED SPI Drivers
 obj-$(CONFIG_LEDS_DAC124S085)		+= leds-dac124s085.o
diff --git a/drivers/leds/leds-accton_as7712_32x.c b/drivers/leds/leds-accton_as7712_32x.c
new file mode 100644
index 0000000..8b14437
--- /dev/null
+++ b/drivers/leds/leds-accton_as7712_32x.c
@@ -0,0 +1,443 @@
+/*
+ * A LED driver for the accton_as7712_32x_led
+ *
+ * Copyright (C) 2014 Accton Technology Corporation.
+ * Brandon Chuang <brandon_chuang@accton.com.tw>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+/*#define DEBUG*/ 
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/platform_device.h>
+#include <linux/err.h>
+#include <linux/leds.h>
+#include <linux/slab.h>
+#include <linux/dmi.h>
+
+extern int accton_i2c_cpld_read (unsigned short cpld_addr, u8 reg);
+extern int accton_i2c_cpld_write(unsigned short cpld_addr, u8 reg, u8 value);
+
+extern void led_classdev_unregister(struct led_classdev *led_cdev);
+extern int led_classdev_register(struct device *parent, struct led_classdev *led_cdev);
+extern void led_classdev_resume(struct led_classdev *led_cdev);
+extern void led_classdev_suspend(struct led_classdev *led_cdev);
+
+#define DRVNAME "accton_as7712_32x_led"
+
+struct accton_as7712_32x_led_data {
+	struct platform_device *pdev;
+	struct mutex	 update_lock;
+	char			 valid;		   /* != 0 if registers are valid */
+	unsigned long	last_updated;	/* In jiffies */
+	u8			   reg_val[1];	  /* only 1 register*/
+};
+
+static struct accton_as7712_32x_led_data  *ledctl = NULL;
+
+/* LED related data
+ */
+
+#define LED_CNTRLER_I2C_ADDRESS	(0x60)
+ 
+#define LED_TYPE_DIAG_REG_MASK	 (0x3)
+#define LED_MODE_DIAG_GREEN_VALUE  (0x02)
+#define LED_MODE_DIAG_RED_VALUE	(0x01)
+#define LED_MODE_DIAG_AMBER_VALUE  (0x00)  /*It's yellow actually. Green+Red=Yellow*/
+#define LED_MODE_DIAG_OFF_VALUE	(0x03)
+
+
+#define LED_TYPE_LOC_REG_MASK	 (0x80)
+#define LED_MODE_LOC_ON_VALUE	 (0)
+#define LED_MODE_LOC_OFF_VALUE	(0x80)
+
+enum led_type {
+	LED_TYPE_DIAG,
+	LED_TYPE_LOC,
+	LED_TYPE_FAN,
+	LED_TYPE_PSU1,
+	LED_TYPE_PSU2
+};
+
+struct led_reg {
+	u32  types;
+	u8   reg_addr;
+};
+
+static const struct led_reg led_reg_map[] = {
+	{(1<<LED_TYPE_LOC) | (1<<LED_TYPE_DIAG), 0x41},
+};
+
+
+enum led_light_mode {
+	LED_MODE_OFF = 0,
+	LED_MODE_GREEN,
+	LED_MODE_AMBER,
+	LED_MODE_RED,
+	LED_MODE_BLUE,
+	LED_MODE_GREEN_BLINK,
+	LED_MODE_AMBER_BLINK,
+	LED_MODE_RED_BLINK,
+	LED_MODE_BLUE_BLINK,
+	LED_MODE_AUTO,
+	LED_MODE_UNKNOWN
+};
+
+struct led_type_mode {
+	enum led_type type;
+	enum led_light_mode mode;	
+	int  reg_bit_mask;
+	int  mode_value;
+};
+
+struct led_type_mode led_type_mode_data[] = {
+{LED_TYPE_LOC,  LED_MODE_OFF,	LED_TYPE_LOC_REG_MASK,   LED_MODE_LOC_OFF_VALUE},
+{LED_TYPE_LOC,  LED_MODE_BLUE,	LED_TYPE_LOC_REG_MASK,   LED_MODE_LOC_ON_VALUE},
+{LED_TYPE_DIAG, LED_MODE_OFF,   LED_TYPE_DIAG_REG_MASK,  LED_MODE_DIAG_OFF_VALUE},
+{LED_TYPE_DIAG, LED_MODE_GREEN, LED_TYPE_DIAG_REG_MASK,  LED_MODE_DIAG_GREEN_VALUE},
+{LED_TYPE_DIAG, LED_MODE_RED,   LED_TYPE_DIAG_REG_MASK,  LED_MODE_DIAG_RED_VALUE},
+{LED_TYPE_DIAG, LED_MODE_AMBER, LED_TYPE_DIAG_REG_MASK,  LED_MODE_DIAG_AMBER_VALUE},
+};
+
+
+
+static void accton_as7712_32x_led_set(struct led_classdev *led_cdev,
+									  enum led_brightness led_light_mode, enum led_type type);
+									  
+
+
+
+
+static int accton_getLedReg(enum led_type type, u8 *reg)
+{	 
+	int i;
+	for (i = 0; i < ARRAY_SIZE(led_reg_map); i++) {	
+		if(led_reg_map[i].types & (type<<1)){
+			*reg = led_reg_map[i].reg_addr;
+			return 0;
+		}
+	}
+	return 1;
+}
+
+
+static int led_reg_val_to_light_mode(enum led_type type, u8 reg_val) {
+	int i;
+	
+	for (i = 0; i < ARRAY_SIZE(led_type_mode_data); i++) {
+
+		if (type != led_type_mode_data[i].type)
+			continue;
+		   
+		if ((led_type_mode_data[i].reg_bit_mask & reg_val) == 
+			 led_type_mode_data[i].mode_value)
+		{
+			return led_type_mode_data[i].mode;
+		}
+	}
+	
+	return 0;
+}
+
+static u8 led_light_mode_to_reg_val(enum led_type type, 
+									enum led_light_mode mode, u8 reg_val) {
+	int i;
+									  
+	for (i = 0; i < ARRAY_SIZE(led_type_mode_data); i++) {
+		if (type != led_type_mode_data[i].type)
+			continue;
+
+		if (mode != led_type_mode_data[i].mode)
+			continue;
+
+		reg_val = led_type_mode_data[i].mode_value | 
+					 (reg_val & (~led_type_mode_data[i].reg_bit_mask));
+		break;
+	}
+	
+	return reg_val;
+}
+
+static int accton_as7712_32x_led_read_value(u8 reg)
+{
+	return accton_i2c_cpld_read(LED_CNTRLER_I2C_ADDRESS, reg);
+}
+
+static int accton_as7712_32x_led_write_value(u8 reg, u8 value)
+{
+	return accton_i2c_cpld_write(LED_CNTRLER_I2C_ADDRESS, reg, value);
+}
+
+static void accton_as7712_32x_led_update(void)
+{
+	mutex_lock(&ledctl->update_lock);
+
+	if (time_after(jiffies, ledctl->last_updated + HZ + HZ / 2)
+		|| !ledctl->valid) {
+		int i;
+
+		dev_dbg(&ledctl->pdev->dev, "Starting accton_as7712_32x_led update\n");
+
+		/* Update LED data
+		 */
+		for (i = 0; i < ARRAY_SIZE(ledctl->reg_val); i++) {
+			int status = accton_as7712_32x_led_read_value(led_reg_map[i].reg_addr);
+			
+			if (status < 0) {
+				ledctl->valid = 0;
+				dev_dbg(&ledctl->pdev->dev, "reg %d, err %d\n", led_reg_map[i].reg_addr, status);
+				goto exit;
+			}
+			else
+			{
+				ledctl->reg_val[i] = status; 
+			}
+		}
+		
+		ledctl->last_updated = jiffies;
+		ledctl->valid = 1;
+	}
+	
+exit:	
+	mutex_unlock(&ledctl->update_lock);
+}
+
+static void accton_as7712_32x_led_set(struct led_classdev *led_cdev,
+									  enum led_brightness led_light_mode, 
+									  enum led_type type)
+{
+	int reg_val;
+	u8 reg	;
+	mutex_lock(&ledctl->update_lock);
+
+	if( !accton_getLedReg(type, &reg))
+	{
+		dev_dbg(&ledctl->pdev->dev, "Not match item for %d.\n", type);
+	}
+	
+	reg_val = accton_as7712_32x_led_read_value(reg);
+	
+	if (reg_val < 0) {
+		dev_dbg(&ledctl->pdev->dev, "reg %d, err %d\n", reg, reg_val);
+		goto exit;
+	}
+	reg_val = led_light_mode_to_reg_val(type, led_light_mode, reg_val);  
+	accton_as7712_32x_led_write_value(reg, reg_val);
+
+	/* to prevent the slow-update issue */
+	ledctl->valid = 0;
+
+exit:
+	mutex_unlock(&ledctl->update_lock);
+}
+
+
+static void accton_as7712_32x_led_diag_set(struct led_classdev *led_cdev,
+										   enum led_brightness led_light_mode)
+{
+	accton_as7712_32x_led_set(led_cdev, led_light_mode,  LED_TYPE_DIAG);
+}
+
+static enum led_brightness accton_as7712_32x_led_diag_get(struct led_classdev *cdev)
+{
+	accton_as7712_32x_led_update();
+	return led_reg_val_to_light_mode(LED_TYPE_DIAG, ledctl->reg_val[0]);
+}
+
+static void accton_as7712_32x_led_loc_set(struct led_classdev *led_cdev,
+										  enum led_brightness led_light_mode)
+{
+	accton_as7712_32x_led_set(led_cdev, led_light_mode, LED_TYPE_LOC);
+}
+
+static enum led_brightness accton_as7712_32x_led_loc_get(struct led_classdev *cdev)
+{
+	accton_as7712_32x_led_update();
+	return led_reg_val_to_light_mode(LED_TYPE_LOC, ledctl->reg_val[0]);
+}
+
+static void accton_as7712_32x_led_auto_set(struct led_classdev *led_cdev,
+										   enum led_brightness led_light_mode)
+{
+}
+
+static enum led_brightness accton_as7712_32x_led_auto_get(struct led_classdev *cdev)
+{
+	return LED_MODE_AUTO;
+}
+
+static struct led_classdev accton_as7712_32x_leds[] = {
+	[LED_TYPE_DIAG] = {
+		.name			 = "accton_as7712_32x_led::diag",
+		.default_trigger = "unused",
+		.brightness_set	 = accton_as7712_32x_led_diag_set,
+		.brightness_get	 = accton_as7712_32x_led_diag_get,
+		.flags			 = LED_CORE_SUSPENDRESUME,
+		.max_brightness	 = LED_MODE_RED,
+	},
+	[LED_TYPE_LOC] = {
+		.name			 = "accton_as7712_32x_led::loc",
+		.default_trigger = "unused",
+		.brightness_set	 = accton_as7712_32x_led_loc_set,
+		.brightness_get	 = accton_as7712_32x_led_loc_get,
+		.flags			 = LED_CORE_SUSPENDRESUME,
+		.max_brightness	 = LED_MODE_BLUE,
+	},
+	[LED_TYPE_FAN] = {
+		.name			 = "accton_as7712_32x_led::fan",
+		.default_trigger = "unused",
+		.brightness_set	 = accton_as7712_32x_led_auto_set,
+		.brightness_get  = accton_as7712_32x_led_auto_get,
+		.flags			 = LED_CORE_SUSPENDRESUME,
+		.max_brightness  = LED_MODE_AUTO,
+	},
+	[LED_TYPE_PSU1] = {
+		.name			 = "accton_as7712_32x_led::psu1",
+		.default_trigger = "unused",
+		.brightness_set	 = accton_as7712_32x_led_auto_set,
+		.brightness_get  = accton_as7712_32x_led_auto_get,
+		.flags			 = LED_CORE_SUSPENDRESUME,
+		.max_brightness  = LED_MODE_AUTO,
+	},
+	[LED_TYPE_PSU2] = {
+		.name			 = "accton_as7712_32x_led::psu2",
+		.default_trigger = "unused",
+		.brightness_set	 = accton_as7712_32x_led_auto_set,
+		.brightness_get  = accton_as7712_32x_led_auto_get,
+		.flags			 = LED_CORE_SUSPENDRESUME,
+		.max_brightness  = LED_MODE_AUTO,
+	},
+};
+
+static int accton_as7712_32x_led_suspend(struct platform_device *dev,
+		pm_message_t state)
+{
+	int i = 0;
+	
+	for (i = 0; i < ARRAY_SIZE(accton_as7712_32x_leds); i++) {
+		led_classdev_suspend(&accton_as7712_32x_leds[i]);
+	}
+
+	return 0;
+}
+
+static int accton_as7712_32x_led_resume(struct platform_device *dev)
+{
+	int i = 0;
+	
+	for (i = 0; i < ARRAY_SIZE(accton_as7712_32x_leds); i++) {
+		led_classdev_resume(&accton_as7712_32x_leds[i]);
+	}
+
+	return 0;
+}
+
+static int accton_as7712_32x_led_probe(struct platform_device *pdev)
+{
+	int ret, i;
+
+	for (i = 0; i < ARRAY_SIZE(accton_as7712_32x_leds); i++) {
+		ret = led_classdev_register(&pdev->dev, &accton_as7712_32x_leds[i]);
+		
+		if (ret < 0)
+			break;
+	}
+	
+	/* Check if all LEDs were successfully registered */
+	if (i != ARRAY_SIZE(accton_as7712_32x_leds)){
+		int j;
+		
+		/* only unregister the LEDs that were successfully registered */
+		for (j = 0; j < i; j++) {
+			led_classdev_unregister(&accton_as7712_32x_leds[i]);
+		}
+	}
+
+	return ret;
+}
+
+static int accton_as7712_32x_led_remove(struct platform_device *pdev)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(accton_as7712_32x_leds); i++) {
+		led_classdev_unregister(&accton_as7712_32x_leds[i]);
+	}
+
+	return 0;
+}
+
+static struct platform_driver accton_as7712_32x_led_driver = {
+	.probe	  = accton_as7712_32x_led_probe,
+	.remove	 = accton_as7712_32x_led_remove,
+	.suspend	= accton_as7712_32x_led_suspend,
+	.resume	 = accton_as7712_32x_led_resume,
+	.driver	 = {
+	.name   = DRVNAME,
+	.owner  = THIS_MODULE,
+	},
+};
+
+static int __init accton_as7712_32x_led_init(void)
+{
+	int ret;
+
+	extern int platform_accton_as7712_32x(void);
+	if (!platform_accton_as7712_32x()) {
+		return -ENODEV;
+	}	
+	
+	ret = platform_driver_register(&accton_as7712_32x_led_driver);
+	if (ret < 0) {
+		goto exit;
+	}
+
+	ledctl = kzalloc(sizeof(struct accton_as7712_32x_led_data), GFP_KERNEL);
+	if (!ledctl) {
+		ret = -ENOMEM;
+		platform_driver_unregister(&accton_as7712_32x_led_driver);
+		goto exit;
+	}
+
+	mutex_init(&ledctl->update_lock);
+
+	ledctl->pdev = platform_device_register_simple(DRVNAME, -1, NULL, 0);
+	if (IS_ERR(ledctl->pdev)) {
+		ret = PTR_ERR(ledctl->pdev);
+		platform_driver_unregister(&accton_as7712_32x_led_driver);
+		kfree(ledctl);
+		goto exit;
+	}
+
+exit:
+	return ret;
+}
+
+static void __exit accton_as7712_32x_led_exit(void)
+{
+	platform_device_unregister(ledctl->pdev);
+	platform_driver_unregister(&accton_as7712_32x_led_driver);
+	kfree(ledctl);
+}
+
+module_init(accton_as7712_32x_led_init);
+module_exit(accton_as7712_32x_led_exit);
+
+MODULE_AUTHOR("Brandon Chuang <brandon_chuang@accton.com.tw>");
+MODULE_DESCRIPTION("accton_as7712_32x_led driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/misc/eeprom/Kconfig b/drivers/misc/eeprom/Kconfig
index 484e3e1..27bf635 100644
--- a/drivers/misc/eeprom/Kconfig
+++ b/drivers/misc/eeprom/Kconfig
@@ -62,6 +62,15 @@ config EEPROM_MAX6875
 	  This driver can also be built as a module.  If so, the module
 	  will be called max6875.
 
+config EEPROM_ACCTON_AS7712_32x_SFP
+        tristate "Accton as7712 32x sfp"
+        depends on I2C && SENSORS_ACCTON_I2C_CPLD
+        help
+          If you say yes here you get support for Accton as7712 32x sfp.
+
+          This driver can also be built as a module. If so, the module will
+          be called accton_as7712_32x_sfp.
+
 
 config EEPROM_93CX6
 	tristate "EEPROM 93CX6 support"
diff --git a/drivers/misc/eeprom/Makefile b/drivers/misc/eeprom/Makefile
index 235b5cc..b2a0062 100644
--- a/drivers/misc/eeprom/Makefile
+++ b/drivers/misc/eeprom/Makefile
@@ -6,4 +6,5 @@ obj-$(CONFIG_EEPROM_93CX6)	+= eeprom_93cx6.o
 obj-$(CONFIG_EEPROM_93XX46)	+= eeprom_93xx46.o
 obj-$(CONFIG_EEPROM_SUNXI_SID)	+= sunxi_sid.o
 obj-$(CONFIG_EEPROM_DIGSY_MTC_CFG) += digsy_mtc_eeprom.o
+obj-$(CONFIG_EEPROM_ACCTON_AS7712_32x_SFP) += accton_as7712_32x_sfp.o
 obj-$(CONFIG_EEPROM_SFF_8436) += sff_8436_eeprom.o
diff --git a/drivers/misc/eeprom/accton_as7712_32x_sfp.c b/drivers/misc/eeprom/accton_as7712_32x_sfp.c
new file mode 100644
index 0000000..4366d2a
--- /dev/null
+++ b/drivers/misc/eeprom/accton_as7712_32x_sfp.c
@@ -0,0 +1,1083 @@
+/*
+ * SFP driver for accton as7712_32x sfp
+ *
+ * Copyright (C)  Brandon Chuang <brandon_chuang@accton.com.tw>
+ *
+ * Based on ad7414.c
+ * Copyright 2006 Stefan Roese <sr at denx.de>, DENX Software Engineering
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ */
+
+#include <linux/module.h>
+#include <linux/jiffies.h>
+#include <linux/i2c.h>
+#include <linux/hwmon.h>
+#include <linux/hwmon-sysfs.h>
+#include <linux/err.h>
+#include <linux/mutex.h>
+#include <linux/sysfs.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
+
+#define DRIVER_NAME 	"as7712_32x_sfp"
+
+#define DEBUG_MODE 0
+
+#if (DEBUG_MODE == 1)
+	#define DEBUG_PRINT(fmt, args...)                                        \
+		printk (KERN_INFO "%s:%s[%d]: " fmt "\r\n", __FILE__, __FUNCTION__, __LINE__, ##args)
+#else
+	#define DEBUG_PRINT(fmt, args...)
+#endif
+
+#define NUM_OF_SFP_PORT 		32
+#define EEPROM_NAME 			"sfp_eeprom"
+#define EEPROM_SIZE				256	/*  256 byte eeprom */
+#define BIT_INDEX(i) 			(1ULL << (i))
+#define USE_I2C_BLOCK_READ 		1
+#define I2C_RW_RETRY_COUNT		3
+#define I2C_RW_RETRY_INTERVAL	100 /* ms */
+
+#define SFP_EEPROM_A0_I2C_ADDR (0xA0 >> 1)
+#define SFP_EEPROM_A2_I2C_ADDR (0xA2 >> 1)
+
+#define SFF8024_PHYSICAL_DEVICE_ID_ADDR		0x0
+#define SFF8024_DEVICE_ID_SFP				0x3
+#define SFF8024_DEVICE_ID_QSFP				0xC
+#define SFF8024_DEVICE_ID_QSFP_PLUS			0xD
+#define SFF8024_DEVICE_ID_QSFP28			0x11
+
+#define SFF8472_DIAG_MON_TYPE_ADDR        	92
+#define SFF8472_DIAG_MON_TYPE_DDM_MASK		0x40
+#define SFF8472_10G_ETH_COMPLIANCE_ADDR		0x3
+#define SFF8472_10G_BASE_MASK				0xF0
+
+#define SFF8436_RX_LOS_ADDR					3
+#define SFF8436_TX_FAULT_ADDR				4
+#define SFF8436_TX_DISABLE_ADDR				86
+
+static ssize_t sfp_eeprom_read(struct i2c_client *, u8, u8 *,int);
+static ssize_t sfp_eeprom_write(struct i2c_client *, u8 , const char *,int);
+extern int accton_i2c_cpld_read(unsigned short cpld_addr, u8 reg);
+extern int accton_i2c_cpld_write(unsigned short cpld_addr, u8 reg, u8 value);
+
+/* Addresses scanned
+ */
+static const unsigned short normal_i2c[] = { SFP_EEPROM_A0_I2C_ADDR, SFP_EEPROM_A2_I2C_ADDR, I2C_CLIENT_END };
+
+#define CPLD_PORT_TO_FRONT_PORT(port)  (port+1)
+
+enum port_numbers {
+sfp1,  sfp2,  sfp3,  sfp4,  sfp5,  sfp6,  sfp7,  sfp8, 
+sfp9,  sfp10, sfp11, sfp12, sfp13, sfp14, sfp15, sfp16,
+sfp17, sfp18, sfp19, sfp20, sfp21, sfp22, sfp23, sfp24,
+sfp25, sfp26, sfp27, sfp28, sfp29, sfp30, sfp31, sfp32
+};
+
+static const struct i2c_device_id sfp_device_id[] = {
+{ "sfp1",  sfp1 },  { "sfp2",  sfp2 },  { "sfp3",  sfp3 },  { "sfp4",  sfp4 },
+{ "sfp5",  sfp5 },  { "sfp6",  sfp6 },  { "sfp7",  sfp7 },  { "sfp8",  sfp8 },
+{ "sfp9",  sfp9 },  { "sfp10", sfp10 }, { "sfp11", sfp11 }, { "sfp12", sfp12 },
+{ "sfp13", sfp13 }, { "sfp14", sfp14 }, { "sfp15", sfp15 }, { "sfp16", sfp16 },
+{ "sfp17", sfp17 }, { "sfp18", sfp18 }, { "sfp19", sfp19 }, { "sfp20", sfp20 },
+{ "sfp21", sfp21 }, { "sfp22", sfp22 }, { "sfp23", sfp23 }, { "sfp24", sfp24 },
+{ "sfp25", sfp25 }, { "sfp26", sfp26 }, { "sfp27", sfp27 }, { "sfp28", sfp28 },
+{ "sfp29", sfp29 }, { "sfp30", sfp30 }, { "sfp31", sfp31 }, { "sfp32", sfp32 },
+{}
+};
+MODULE_DEVICE_TABLE(i2c, sfp_device_id);
+
+/* 
+ * list of valid port types
+ * note OOM_PORT_TYPE_NOT_PRESENT to indicate no 
+ * module is present in this port
+ */
+typedef enum oom_driver_port_type_e {
+	OOM_DRIVER_PORT_TYPE_INVALID,
+	OOM_DRIVER_PORT_TYPE_NOT_PRESENT,
+	OOM_DRIVER_PORT_TYPE_SFP,
+	OOM_DRIVER_PORT_TYPE_SFP_PLUS,
+	OOM_DRIVER_PORT_TYPE_QSFP,
+	OOM_DRIVER_PORT_TYPE_QSFP_PLUS,
+	OOM_DRIVER_PORT_TYPE_QSFP28
+} oom_driver_port_type_t;
+
+enum driver_type_e {
+	DRIVER_TYPE_SFP_MSA,
+	DRIVER_TYPE_SFP_DDM,
+	DRIVER_TYPE_QSFP
+};
+
+/* Each client has this additional data
+ */
+struct eeprom_data {
+	char				 valid;			/* !=0 if registers are valid */
+	unsigned long		 last_updated;	/* In jiffies */
+	struct bin_attribute bin;			/* eeprom data */		
+};
+
+struct sfp_msa_data {
+	char			valid;		  	/* !=0 if registers are valid */
+	unsigned long	last_updated;   /* In jiffies */
+	u64				status[2];	   	/* index 0 => device id
+											 1 => 10G Ethernet Compliance Codes 
+												  to distinguish SFP or SFP+ 
+											 2 => DIAGNOSTIC MONITORING TYPE */
+	struct eeprom_data				eeprom;
+};
+
+struct sfp_ddm_data {
+	char			valid;			/* !=0 if registers are valid */
+	unsigned long	last_updated; 	/* In jiffies */
+	u64				status[3];	  	/* bit0:port0, bit1:port1 and so on */
+									/* index 0 => tx_fail
+											 1 => tx_disable
+											 2 => rx_loss */
+	struct eeprom_data				eeprom;
+};
+
+struct qsfp_data {
+	char			valid;		  	/* !=0 if registers are valid */
+	unsigned long	last_updated;   /* In jiffies */
+	u8				status[3];	  	/* bit0:port0, bit1:port1 and so on */
+									/* index 0 => tx_fail
+											 1 => tx_disable
+											 2 => rx_loss */
+
+	u8					device_id;	
+	struct eeprom_data	eeprom;
+};
+
+struct sfp_port_data {
+	struct mutex		   update_lock;
+	enum driver_type_e     driver_type;
+	int 				   port;		/* CPLD port index */
+	oom_driver_port_type_t port_type;
+	u64					   present;   /* present status, bit0:port0, bit1:port1 and so on */
+
+	struct sfp_msa_data	  *msa;
+	struct sfp_ddm_data   *ddm;
+	struct qsfp_data 	  *qsfp;
+
+	struct i2c_client 	  *client;
+};
+
+enum sfp_sysfs_attributes {
+	PRESENT,
+	PRESENT_ALL,
+	PORT_NUMBER,
+	PORT_TYPE,
+	DDM_IMPLEMENTED,
+	TX_FAULT,
+	TX_FAULT1,
+	TX_FAULT2,
+	TX_FAULT3,
+	TX_FAULT4,
+	TX_DISABLE,
+	TX_DISABLE1,
+	TX_DISABLE2,
+	TX_DISABLE3,
+	TX_DISABLE4,
+	TX_DISABLE_ALL,	
+	RX_LOS,
+	RX_LOS1,
+	RX_LOS2,
+	RX_LOS3,
+	RX_LOS4,
+	RX_LOS_ALL
+};
+
+static ssize_t show_port_number(struct device *dev, struct device_attribute *da,
+			 char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct sfp_port_data *data = i2c_get_clientdata(client);
+	return sprintf(buf, "%d\n", CPLD_PORT_TO_FRONT_PORT(data->port));
+}
+
+static struct sfp_port_data *sfp_update_present(struct i2c_client *client)
+{
+	struct sfp_port_data *data = i2c_get_clientdata(client);
+	int i = 0;
+	int status = -1;
+	u8 regs[] = {0x30, 0x31, 0x32, 0x33};
+
+	DEBUG_PRINT("Starting sfp present status update");
+	mutex_lock(&data->update_lock);
+
+	/* Read present status of port 1~32 */
+    data->present = 0;
+	
+    for (i = 0; i < ARRAY_SIZE(regs); i++) {
+        status = accton_i2c_cpld_read(0x60, regs[i]);
+        
+        if (status < 0) {
+            DEBUG_PRINT("cpld(0x60) reg(0x%x) err %d", regs[i], status);
+            goto exit;
+        }
+        
+		DEBUG_PRINT("Present status = 0x%lx", data->present);		
+        data->present |= (u64)status << (i*8);
+    }
+
+	DEBUG_PRINT("Present status = 0x%lx", data->present);
+exit:
+	mutex_unlock(&data->update_lock);
+	return data;
+}
+
+static struct sfp_port_data *sfp_update_tx_rx_status(struct device *dev)
+{
+	return NULL;
+}
+
+static ssize_t sfp_set_tx_disable(struct device *dev, struct device_attribute *da,
+			const char *buf, size_t count)
+{
+	return 0;
+}
+
+static int sfp_is_port_present(struct i2c_client *client, int port)
+{
+	struct sfp_port_data *data = sfp_update_present(client);
+	return (data->present & BIT_INDEX(data->port)) ? 0 : 1;
+}
+
+static ssize_t show_present(struct device *dev, struct device_attribute *da,
+			 char *buf)
+{
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(da);
+	struct i2c_client *client = to_i2c_client(dev);
+	struct sfp_port_data *data = i2c_get_clientdata(client);
+
+	if (PRESENT_ALL == attr->index) {
+		
+	}
+
+	/* PRESENT */
+	return sprintf(buf, "%d\n", sfp_is_port_present(client, data->port));
+}
+
+static struct sfp_port_data *sfp_update_port_type(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct sfp_port_data *data = i2c_get_clientdata(client);
+	u8 buf = 0;
+	int status;
+
+	mutex_lock(&data->update_lock);
+
+	switch (data->driver_type) {
+		case DRIVER_TYPE_SFP_MSA:
+		{
+			status = sfp_eeprom_read(data->client, SFF8024_PHYSICAL_DEVICE_ID_ADDR, &buf, sizeof(buf));	
+			if (status < 0) {
+				data->port_type = OOM_DRIVER_PORT_TYPE_INVALID;
+				break;
+			}
+
+			if (buf != SFF8024_DEVICE_ID_SFP) {
+				data->port_type = OOM_DRIVER_PORT_TYPE_INVALID;
+				break;
+			}
+			
+			status = sfp_eeprom_read(data->client, SFF8472_10G_ETH_COMPLIANCE_ADDR, &buf, sizeof(buf));	
+			if (status < 0) {
+				data->port_type = OOM_DRIVER_PORT_TYPE_INVALID;
+				break;
+			}
+
+			DEBUG_PRINT("sfp port type (0x3) data = (0x%x)", buf);
+			data->port_type = buf & SFF8472_10G_BASE_MASK ? OOM_DRIVER_PORT_TYPE_SFP_PLUS : OOM_DRIVER_PORT_TYPE_SFP;
+			break;
+		}
+		case DRIVER_TYPE_QSFP:
+		{
+			status = sfp_eeprom_read(data->client, SFF8024_PHYSICAL_DEVICE_ID_ADDR, &buf, sizeof(buf));	
+			if (status < 0) {
+				data->port_type = OOM_DRIVER_PORT_TYPE_INVALID;
+				break;
+			}
+
+			DEBUG_PRINT("qsfp port type (0x0) buf = (0x%x)", buf);
+			switch (buf) {
+			case SFF8024_DEVICE_ID_QSFP:
+				data->port_type = OOM_DRIVER_PORT_TYPE_QSFP;
+				break;
+			case SFF8024_DEVICE_ID_QSFP_PLUS:
+				data->port_type = OOM_DRIVER_PORT_TYPE_QSFP_PLUS;
+				break;
+			case SFF8024_DEVICE_ID_QSFP28:
+				data->port_type = OOM_DRIVER_PORT_TYPE_QSFP_PLUS;
+				break;				
+			default:
+				data->port_type = OOM_DRIVER_PORT_TYPE_INVALID;
+				break;
+			}
+
+			break;
+		}
+		default:
+			break;
+	}
+
+	mutex_unlock(&data->update_lock);
+	return data;
+}
+
+static ssize_t show_port_type(struct device *dev, struct device_attribute *da,
+			 char *buf)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct sfp_port_data *data = i2c_get_clientdata(client);	
+
+	if (!sfp_is_port_present(client, data->port)) {
+		return sprintf(buf, "%d\n", OOM_DRIVER_PORT_TYPE_NOT_PRESENT);
+	}
+
+	sfp_update_port_type(dev);
+	return sprintf(buf, "%d\n", data->port_type);
+}
+
+static struct sfp_port_data *qsfp_update_tx_rx_status(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct sfp_port_data *data = i2c_get_clientdata(client);	
+	int i, status = -1;
+	u8 buf = 0;
+	u8 reg[] = {SFF8436_TX_FAULT_ADDR, SFF8436_TX_DISABLE_ADDR, SFF8436_RX_LOS_ADDR};
+
+	if (time_before(jiffies, data->qsfp->last_updated + HZ + HZ / 2) && data->qsfp->valid) {
+		return data;
+	}
+
+	dev_dbg(dev, "Starting sfp tx rx status update");
+	mutex_lock(&data->update_lock);
+	data->qsfp->valid = 0;
+	memset(data->qsfp->status, 0, sizeof(data->qsfp->status));
+
+	/* Notify device to update tx fault/ tx disable/ rx los status */
+	for (i = 0; i < ARRAY_SIZE(reg); i++) {
+		status = sfp_eeprom_read(data->client, reg[i], &buf, sizeof(buf)); 
+		if (status < 0) {
+			goto exit;
+		}		
+	}
+	msleep(200);
+
+	/* Read actual tx fault/ tx disable/ rx los status */
+	for (i = 0; i < ARRAY_SIZE(reg); i++) {
+		status = sfp_eeprom_read(data->client, reg[i], &buf, sizeof(buf)); 
+		if (status < 0) {
+			goto exit;
+		}
+
+		DEBUG_PRINT("qsfp reg(0x%x) status = (0x%x)", reg[i], data->qsfp->status[i]);
+		data->qsfp->status[i] = (buf & 0xF);
+	}
+
+	data->qsfp->valid = 1;
+	data->qsfp->last_updated = jiffies;
+	mutex_unlock(&data->update_lock);
+	return data;
+
+exit:
+	mutex_unlock(&data->update_lock);
+	return NULL;	
+}
+
+static ssize_t qsfp_show_tx_rx_status(struct device *dev, struct device_attribute *da,
+			 char *buf)
+{
+	u8 val = 0;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(da);
+	struct sfp_port_data *data = i2c_get_clientdata(client);	
+
+	if (!sfp_is_port_present(client, data->port)) {
+		return -ENODEV;
+	}
+
+	data = qsfp_update_tx_rx_status(dev);
+	if (!data) {
+		return -EIO;
+	}
+
+	switch (attr->index) {
+	case TX_FAULT1:
+	case TX_FAULT2:	
+	case TX_FAULT3:	
+	case TX_FAULT4:	
+		val = (data->qsfp->status[2] & BIT_INDEX(attr->index - TX_FAULT1)) ? 1 : 0;
+		break;
+	case TX_DISABLE1:
+	case TX_DISABLE2:
+	case TX_DISABLE3:
+	case TX_DISABLE4:
+		val = (data->qsfp->status[1] & BIT_INDEX(attr->index - TX_DISABLE1)) ? 1 : 0;
+		break;
+	case TX_DISABLE_ALL:
+		val = ((data->qsfp->status[1] & 0xF) == 0xF) ? 1 : 0;
+		break;
+		
+	case RX_LOS1:
+	case RX_LOS2:
+	case RX_LOS3:
+	case RX_LOS4:
+		val = (data->qsfp->status[0] & BIT_INDEX(attr->index - RX_LOS1)) ? 1 : 0;
+		break;		
+	default:
+		break;
+	}
+
+	return sprintf(buf, "%d\n", val);
+}
+
+static ssize_t qsfp_set_tx_disable(struct device *dev, struct device_attribute *da,
+			const char *buf, size_t count)
+{
+	long disable;
+	int result;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(da);
+	struct sfp_port_data *data;
+
+	result = kstrtol(buf, 10, &disable);
+	if (result) {
+		return result;
+	}
+
+	data = qsfp_update_tx_rx_status(dev);
+	if (!data) {
+		return -EIO;
+	}
+
+	mutex_lock(&data->update_lock);
+
+	DEBUG_PRINT ("%s-%d: disable:%u %d==%d %u\r\n",  __FUNCTION__, __LINE__, 
+	disable, attr->index,  TX_DISABLE_ALL, data->qsfp->status[1]);
+
+    if (attr->index == TX_DISABLE_ALL)
+    {
+        data->qsfp->status[1] =  disable? 0xF:0;
+    }
+    else
+    {
+    	if (disable) {
+    		data->qsfp->status[1] |= (1 << (attr->index - TX_DISABLE1));
+    	}
+    	else {
+    		data->qsfp->status[1] &= ~(1 << (attr->index - TX_DISABLE1));
+    	}
+    }
+	DEBUG_PRINT("index = (%d), status = (0x%x)", attr->index, data->qsfp->status[1]);
+	result = sfp_eeprom_write(client, SFF8436_TX_DISABLE_ADDR, &data->qsfp->status[1], sizeof(data->qsfp->status[1]));
+	mutex_unlock(&data->update_lock);
+	return count;
+}
+
+static ssize_t sfp_show_ddm_implemented(struct device *dev, struct device_attribute *da,
+			 char *buf)
+{
+	int status;
+	char ddm;
+	struct i2c_client *client = to_i2c_client(dev);
+	struct sfp_port_data *data = i2c_get_clientdata(client);	
+
+	if (!sfp_is_port_present(client, data->port)) {
+		return -ENODEV;
+	}
+
+	status = sfp_eeprom_read(data->client, SFF8472_DIAG_MON_TYPE_ADDR, &ddm, sizeof(ddm));	
+	if (status < 0) {
+		return -EIO;
+	}
+
+	return sprintf(buf, "%d\n", (ddm & SFF8472_DIAG_MON_TYPE_DDM_MASK) ? 1 : 0);
+}
+
+static ssize_t sfp_show_tx_rx_status(struct device *dev, struct device_attribute *da,
+			 char *buf)
+{
+	u8 val = 0, index = 0;
+	struct sensor_device_attribute *attr = to_sensor_dev_attr(da);
+	struct sfp_port_data *data;
+
+	data = sfp_update_tx_rx_status(dev);
+	if (!data) {
+		return -EIO;
+	}
+	
+	switch (attr->index) {
+	case TX_FAULT:
+		index = 0;
+		break;
+	case TX_DISABLE:
+		index = 1;
+		break;
+	case RX_LOS:
+		index = 2;
+		break;		
+	default:
+		break;
+	}
+
+	val = (data->ddm->status[index] & BIT_INDEX(data->port)) ? 1 : 0;
+	return sprintf(buf, "%d\n", val);
+}
+
+/* SFP/QSFP common attributes for sysfs */
+static SENSOR_DEVICE_ATTR(sfp_port_number, S_IRUGO, show_port_number, NULL, PORT_NUMBER);
+static SENSOR_DEVICE_ATTR(sfp_is_present,  S_IRUGO, show_present, NULL, PRESENT);
+static SENSOR_DEVICE_ATTR(sfp_port_type, S_IRUGO, show_port_type, NULL, PORT_TYPE);
+static SENSOR_DEVICE_ATTR(sfp_is_present_all,  S_IRUGO, show_present, NULL, PRESENT);
+
+/* QSFP attributes for sysfs */
+static SENSOR_DEVICE_ATTR(sfp_rx_los1, S_IRUGO, qsfp_show_tx_rx_status, NULL, RX_LOS1);
+static SENSOR_DEVICE_ATTR(sfp_rx_los2, S_IRUGO, qsfp_show_tx_rx_status, NULL, RX_LOS2);
+static SENSOR_DEVICE_ATTR(sfp_rx_los3, S_IRUGO, qsfp_show_tx_rx_status, NULL, RX_LOS3);
+static SENSOR_DEVICE_ATTR(sfp_rx_los4, S_IRUGO, qsfp_show_tx_rx_status, NULL, RX_LOS4);
+static SENSOR_DEVICE_ATTR(sfp_tx_disable1, S_IWUSR | S_IRUGO, qsfp_show_tx_rx_status, qsfp_set_tx_disable, TX_DISABLE1);
+static SENSOR_DEVICE_ATTR(sfp_tx_disable2, S_IWUSR | S_IRUGO, qsfp_show_tx_rx_status, qsfp_set_tx_disable, TX_DISABLE2);
+static SENSOR_DEVICE_ATTR(sfp_tx_disable3, S_IWUSR | S_IRUGO, qsfp_show_tx_rx_status, qsfp_set_tx_disable, TX_DISABLE3);
+static SENSOR_DEVICE_ATTR(sfp_tx_disable4, S_IWUSR | S_IRUGO, qsfp_show_tx_rx_status, qsfp_set_tx_disable, TX_DISABLE4);
+static SENSOR_DEVICE_ATTR(sfp_tx_disable_all, S_IWUSR | S_IRUGO, qsfp_show_tx_rx_status, qsfp_set_tx_disable, TX_DISABLE_ALL);
+static SENSOR_DEVICE_ATTR(sfp_tx_fault1, S_IRUGO, qsfp_show_tx_rx_status, NULL, TX_FAULT1);
+static SENSOR_DEVICE_ATTR(sfp_tx_fault2, S_IRUGO, qsfp_show_tx_rx_status, NULL, TX_FAULT2);
+static SENSOR_DEVICE_ATTR(sfp_tx_fault3, S_IRUGO, qsfp_show_tx_rx_status, NULL, TX_FAULT3);
+static SENSOR_DEVICE_ATTR(sfp_tx_fault4, S_IRUGO, qsfp_show_tx_rx_status, NULL, TX_FAULT4);
+static struct attribute *qsfp_attributes[] = {
+	&sensor_dev_attr_sfp_port_number.dev_attr.attr,
+	&sensor_dev_attr_sfp_port_type.dev_attr.attr,
+	&sensor_dev_attr_sfp_is_present.dev_attr.attr,
+	&sensor_dev_attr_sfp_rx_los1.dev_attr.attr,
+	&sensor_dev_attr_sfp_rx_los2.dev_attr.attr,
+	&sensor_dev_attr_sfp_rx_los3.dev_attr.attr,
+	&sensor_dev_attr_sfp_rx_los4.dev_attr.attr,
+	&sensor_dev_attr_sfp_tx_disable1.dev_attr.attr,
+	&sensor_dev_attr_sfp_tx_disable2.dev_attr.attr,
+	&sensor_dev_attr_sfp_tx_disable3.dev_attr.attr,
+	&sensor_dev_attr_sfp_tx_disable4.dev_attr.attr,
+	&sensor_dev_attr_sfp_tx_disable_all.dev_attr.attr,	
+	&sensor_dev_attr_sfp_tx_fault1.dev_attr.attr,
+	&sensor_dev_attr_sfp_tx_fault2.dev_attr.attr,
+	&sensor_dev_attr_sfp_tx_fault3.dev_attr.attr,
+	&sensor_dev_attr_sfp_tx_fault4.dev_attr.attr,	
+	NULL
+};
+
+/* SFP msa attributes for sysfs */
+static SENSOR_DEVICE_ATTR(sfp_ddm_implemented,   S_IRUGO, sfp_show_ddm_implemented, NULL, DDM_IMPLEMENTED);
+static struct attribute *sfp_msa_attributes[] = {
+	&sensor_dev_attr_sfp_port_number.dev_attr.attr,
+	&sensor_dev_attr_sfp_port_type.dev_attr.attr,
+	&sensor_dev_attr_sfp_is_present.dev_attr.attr,
+	&sensor_dev_attr_sfp_ddm_implemented.dev_attr.attr,
+	NULL
+};
+
+/* SFP ddm attributes for sysfs */
+static SENSOR_DEVICE_ATTR(sfp_rx_los,  S_IRUGO, sfp_show_tx_rx_status, NULL, RX_LOS);
+static SENSOR_DEVICE_ATTR(sfp_tx_disable,  S_IWUSR | S_IRUGO, sfp_show_tx_rx_status, sfp_set_tx_disable, TX_DISABLE);
+static SENSOR_DEVICE_ATTR(sfp_tx_fault,  S_IRUGO, sfp_show_tx_rx_status, NULL, TX_FAULT);
+static struct attribute *sfp_ddm_attributes[] = {
+	&sensor_dev_attr_sfp_tx_fault.dev_attr.attr,
+	&sensor_dev_attr_sfp_rx_los.dev_attr.attr,
+	&sensor_dev_attr_sfp_tx_disable.dev_attr.attr,
+	NULL
+};
+
+static ssize_t sfp_eeprom_write(struct i2c_client *client, u8 command, const char *data,
+			  int data_len)
+{
+#if USE_I2C_BLOCK_READ
+	int result, retry = I2C_RW_RETRY_COUNT;
+
+	if (data_len > I2C_SMBUS_BLOCK_MAX) {
+		data_len = I2C_SMBUS_BLOCK_MAX;
+	} 
+
+	while (retry) {
+		result = i2c_smbus_write_i2c_block_data(client, command, data_len, data);
+		if (result < 0) {
+			msleep(I2C_RW_RETRY_INTERVAL);
+			retry--;
+			continue;
+		}
+ 
+		break;
+	}
+
+	if (unlikely(result < 0)) {
+		return result;
+	}		
+
+	return data_len;
+#else
+	int result, retry = I2C_RW_RETRY_COUNT;
+
+	while (retry) {
+		result = i2c_smbus_write_byte_data(client, command, *data);
+		if (result < 0) {
+			msleep(I2C_RW_RETRY_INTERVAL);
+			retry--;
+			continue;
+		}
+ 
+		break;
+	}
+	
+	if (unlikely(result < 0)) {
+		return result;
+	}
+
+	return 1;
+#endif
+
+	
+}
+
+
+static ssize_t sfp_port_write(struct sfp_port_data *data, 
+						  const char *buf, loff_t off, size_t count)
+{
+	ssize_t retval = 0;
+	
+	if (unlikely(!count)) {
+		return count;
+	}
+	
+	/*
+	 * Write data to chip, protecting against concurrent updates
+	 * from this host, but not from other I2C masters.
+	 */
+	mutex_lock(&data->update_lock);
+	
+	while (count) {
+		ssize_t status;
+	
+		status = sfp_eeprom_write(data->client, off, buf, count);
+		if (status <= 0) {
+			if (retval == 0) {
+				retval = status;
+			}
+			break;
+		}
+		buf += status;
+		off += status;
+		count -= status;
+		retval += status;
+	}
+	
+	mutex_unlock(&data->update_lock);
+	return retval;
+}
+
+
+static ssize_t sfp_bin_write(struct file *filp, struct kobject *kobj,
+				struct bin_attribute *attr,
+				char *buf, loff_t off, size_t count)
+{
+	struct sfp_port_data *data;
+	DEBUG_PRINT("%s(%d) offset = (%d), count = (%d)", off, count);
+	data = dev_get_drvdata(container_of(kobj, struct device, kobj));
+	return sfp_port_write(data, buf, off, count);
+}
+
+static ssize_t sfp_eeprom_read(struct i2c_client *client, u8 command, u8 *data,
+			  int data_len)
+{
+#if USE_I2C_BLOCK_READ
+	int result, retry = I2C_RW_RETRY_COUNT;
+
+	if (data_len > I2C_SMBUS_BLOCK_MAX) {
+		data_len = I2C_SMBUS_BLOCK_MAX;
+	}
+
+	while (retry) {
+		result = i2c_smbus_read_i2c_block_data(client, command, data_len, data);
+		if (result < 0) {
+			msleep(I2C_RW_RETRY_INTERVAL);
+			retry--;
+			continue;
+		}
+
+		break;
+	}
+	
+	if (unlikely(result < 0))
+		goto abort;
+	if (unlikely(result != data_len)) {
+		result = -EIO;
+		goto abort;
+	}
+	
+	//result = data_len;
+	
+abort:
+	return result;
+#else
+	int result, retry = I2C_RW_RETRY_COUNT;
+
+	while (retry) {
+		result = i2c_smbus_read_byte_data(client, command);
+		if (result < 0) {
+			msleep(I2C_RW_RETRY_INTERVAL);
+			retry--;
+			continue;
+		}
+ 
+		break;
+	}
+
+	if (unlikely(result < 0)) {
+		dev_dbg(&client->dev, "sfp read byte data failed, command(0x%2x), data(0x%2x)\r\n", command, result);
+		goto abort;
+	}
+
+	*data  = (u8)result;
+	result = 1;
+
+abort:
+	return result;	
+#endif
+}
+
+static ssize_t sfp_port_read(struct sfp_port_data *data,
+				char *buf, loff_t off, size_t count)
+{
+	ssize_t retval = 0;
+	
+	if (unlikely(!count)) {
+		DEBUG_PRINT("Count = 0, return");
+		return count;
+	}
+	
+	/*
+	 * Read data from chip, protecting against concurrent updates
+	 * from this host, but not from other I2C masters.
+	 */
+	mutex_lock(&data->update_lock);
+
+	while (count) {
+		ssize_t status;
+	
+		status = sfp_eeprom_read(data->client, off, buf, count);
+		if (status <= 0) {
+			if (retval == 0) {
+				retval = status;
+			}
+			break;
+		}
+		
+		buf += status;
+		off += status;
+		count -= status;
+		retval += status;
+	}
+	
+	mutex_unlock(&data->update_lock);
+	return retval;
+
+}
+
+static ssize_t sfp_bin_read(struct file *filp, struct kobject *kobj,
+		struct bin_attribute *attr,
+		char *buf, loff_t off, size_t count)
+{
+	struct sfp_port_data *data;
+	DEBUG_PRINT("offset = (%d), count = (%d)", off, count);
+	data = dev_get_drvdata(container_of(kobj, struct device, kobj));
+	return sfp_port_read(data, buf, off, count);
+}
+
+static int sfp_sysfs_eeprom_init(struct kobject *kobj, struct bin_attribute *eeprom)
+{
+	int err;
+
+	sysfs_bin_attr_init(eeprom);
+	eeprom->attr.name = EEPROM_NAME;
+	eeprom->attr.mode = S_IWUSR | S_IRUGO;
+	eeprom->read  	  = sfp_bin_read;
+	eeprom->write 	  = sfp_bin_write;
+	eeprom->size  	  = EEPROM_SIZE;	
+
+	/* Create eeprom file */
+	err = sysfs_create_bin_file(kobj, eeprom);
+	if (err) {
+		return err;
+	}
+	
+	return 0;
+}
+
+static int sfp_sysfs_eeprom_cleanup(struct kobject *kobj, struct bin_attribute *eeprom)
+{
+	sysfs_remove_bin_file(kobj, eeprom);
+	return 0;
+}
+
+static const struct attribute_group sfp_msa_group = {
+	.attrs = sfp_msa_attributes,
+};
+
+static int sfp_i2c_check_functionality(struct i2c_client *client)
+{
+#if USE_I2C_BLOCK_READ
+    return i2c_check_functionality(client->adapter, I2C_FUNC_SMBUS_I2C_BLOCK);
+#else
+    return i2c_check_functionality(client->adapter, I2C_FUNC_SMBUS_BYTE_DATA);
+#endif
+}
+
+static int sfp_msa_probe(struct i2c_client *client, const struct i2c_device_id *dev_id,
+							   struct sfp_msa_data **data)
+{
+	int status;
+	struct sfp_msa_data *msa;
+	
+	if (!sfp_i2c_check_functionality(client)) {
+        status = -EIO;
+        goto exit;		
+	}
+	
+	msa = kzalloc(sizeof(struct sfp_msa_data), GFP_KERNEL);
+	if (!msa) {
+		status = -ENOMEM;
+		goto exit;
+	}	
+	
+	/* Register sysfs hooks */
+	status = sysfs_create_group(&client->dev.kobj, &sfp_msa_group);
+	if (status) {
+		goto exit_free;
+	}
+
+	/* init eeprom */
+	status = sfp_sysfs_eeprom_init(&client->dev.kobj, &msa->eeprom.bin);
+	if (status) {
+		goto exit_remove;
+	}
+
+	*data = msa;
+	dev_info(&client->dev, "sfp msa '%s'\n", client->name);
+
+	return 0;
+
+exit_remove:
+	sysfs_remove_group(&client->dev.kobj, &sfp_msa_group);
+exit_free:
+	kfree(msa);
+exit:
+
+	return status;		
+}
+
+static const struct attribute_group sfp_ddm_group = {
+	.attrs = sfp_ddm_attributes,
+};
+
+static int sfp_ddm_probe(struct i2c_client *client, const struct i2c_device_id *dev_id,
+							   struct sfp_ddm_data **data)
+{
+	int status;
+	struct sfp_ddm_data *ddm;
+	
+	if (!sfp_i2c_check_functionality(client)) {
+        status = -EIO;
+        goto exit;		
+	}
+	
+	ddm = kzalloc(sizeof(struct sfp_ddm_data), GFP_KERNEL);
+	if (!ddm) {
+		status = -ENOMEM;
+		goto exit;
+	}	
+
+	/* Register sysfs hooks */
+	status = sysfs_create_group(&client->dev.kobj, &sfp_ddm_group);
+	if (status) {
+		goto exit_free;
+	}
+
+	/* init eeprom */
+	status = sfp_sysfs_eeprom_init(&client->dev.kobj, &ddm->eeprom.bin);
+	if (status) {
+		goto exit_remove;
+	}
+
+	*data = ddm;
+	dev_info(&client->dev, "sfp ddm '%s'\n", client->name);
+
+	return 0;
+
+exit_remove:
+	sysfs_remove_group(&client->dev.kobj, &sfp_ddm_group);
+exit_free:
+	kfree(ddm);
+exit:
+
+	return status;	
+}
+
+static const struct attribute_group qsfp_group = {
+	.attrs = qsfp_attributes,
+};
+
+static int qsfp_probe(struct i2c_client *client, const struct i2c_device_id *dev_id,
+						  struct qsfp_data **data)
+{
+	int status;
+	struct qsfp_data *qsfp;
+	
+	if (!sfp_i2c_check_functionality(client)) {
+        status = -EIO;
+        goto exit;		
+	}
+
+	qsfp = kzalloc(sizeof(struct qsfp_data), GFP_KERNEL);
+	if (!qsfp) {
+		status = -ENOMEM;
+		goto exit;
+	}
+
+	/* Register sysfs hooks */
+	status = sysfs_create_group(&client->dev.kobj, &qsfp_group);
+	if (status) {
+		goto exit_free;
+	}
+
+	/* init eeprom */
+	status = sfp_sysfs_eeprom_init(&client->dev.kobj, &qsfp->eeprom.bin);
+	if (status) {
+		goto exit_remove;
+	}
+
+	/* Bring QSFPs out of reset 
+	as6712_32x_i2c_cpld_write(0x62, 0x4, 0xFF);
+	as6712_32x_i2c_cpld_write(0x62, 0x5, 0xFF);	
+	as6712_32x_i2c_cpld_write(0x64, 0x4, 0xFF);
+	as6712_32x_i2c_cpld_write(0x64, 0x5, 0xFF);*/
+
+	*data = qsfp;
+	dev_info(&client->dev, "qsfp '%s'\n", client->name);
+
+	return 0;
+
+exit_remove:
+	sysfs_remove_group(&client->dev.kobj, &qsfp_group);
+exit_free:
+	kfree(qsfp);
+exit:
+
+	return status;	
+}
+
+static int sfp_device_probe(struct i2c_client *client,
+			const struct i2c_device_id *dev_id)
+{
+	struct sfp_port_data *data = NULL;
+
+	data = kzalloc(sizeof(struct sfp_port_data), GFP_KERNEL);
+	if (!data) {
+		return -ENOMEM;
+	}
+
+	i2c_set_clientdata(client, data);
+	mutex_init(&data->update_lock);
+	data->port 	 = dev_id->driver_data;
+	data->client = client;
+	
+	if (client->addr != SFP_EEPROM_A0_I2C_ADDR) {
+		return -ENODEV;
+	}
+	
+	data->driver_type = DRIVER_TYPE_QSFP;
+	return qsfp_probe(client, dev_id, &data->qsfp);
+}
+
+static int sfp_msa_remove(struct i2c_client *client, struct sfp_msa_data *data)
+{
+	sfp_sysfs_eeprom_cleanup(&client->dev.kobj, &data->eeprom.bin);
+	sysfs_remove_group(&client->dev.kobj, &sfp_msa_group);	
+	kfree(data);
+	return 0;
+}
+
+static int sfp_ddm_remove(struct i2c_client *client, struct sfp_ddm_data *data)
+{
+	sfp_sysfs_eeprom_cleanup(&client->dev.kobj, &data->eeprom.bin);
+	sysfs_remove_group(&client->dev.kobj, &sfp_ddm_group);
+	kfree(data);
+	return 0;
+}
+
+static int qfp_remove(struct i2c_client *client, struct qsfp_data *data)
+{
+	sfp_sysfs_eeprom_cleanup(&client->dev.kobj, &data->eeprom.bin);
+	sysfs_remove_group(&client->dev.kobj, &qsfp_group);
+	kfree(data);
+	return 0;
+}
+
+static int sfp_device_remove(struct i2c_client *client)
+{
+	struct sfp_port_data *data = i2c_get_clientdata(client);
+
+	switch (data->driver_type) {
+		case DRIVER_TYPE_SFP_MSA:
+			return sfp_msa_remove(client, data->msa);
+		case DRIVER_TYPE_SFP_DDM:
+			return sfp_ddm_remove(client, data->ddm);
+		case DRIVER_TYPE_QSFP:
+			return qfp_remove(client, data->qsfp);
+   	}
+
+	return 0;
+}
+
+static struct i2c_driver sfp_driver = {
+    .driver = {
+        .name     = DRIVER_NAME,
+    },
+    .probe        = sfp_device_probe,
+    .remove       = sfp_device_remove,
+    .id_table     = sfp_device_id,
+    .address_list = normal_i2c,
+};
+
+static int __init sfp_init(void)
+{
+	extern int platform_accton_as7712_32x(void);
+	if (!platform_accton_as7712_32x()) {
+		return -ENODEV;
+	}
+
+	return i2c_add_driver(&sfp_driver);
+}
+
+static void __exit sfp_exit(void)
+{
+	i2c_del_driver(&sfp_driver);
+}
+
+MODULE_AUTHOR("Brandon Chuang <brandon_chuang@accton.com.tw>");
+MODULE_DESCRIPTION("accton as7712_32x_sfp driver");
+MODULE_LICENSE("GPL");
+
+module_init(sfp_init);
+module_exit(sfp_exit);
+

